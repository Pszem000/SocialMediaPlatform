@page "/MainPage"
@using SocialMediaPlatform.Models
@using SocialMediaPlatform.Services
@using SocialMediaPlatform.Services.Interfaces
@inject IPostsService _PostService;
@inject IPostGetter _PostGetter;
@inject IUserGetter _UserGetter;
@inject ILikeGetter _LikeGetter;
<link href="css/MainPageStyle.css" rel="stylesheet">
	<div id="AddPost">
		<h2>Add Post</h2>
		<br />
		<input type="text" id="Add-Post-Content" placeholder="Enter Content" @bind="PostContent" />
		<br />
		<button  id="Add-Post-Button" @onclick="SavePost">Add</button>
	</div>
	<div id="PostsBlock">
		@if (Posts != null)
		{
			foreach (var Post in Posts)
			{
				<div class="Post">
					<div class="CreatorContainer">
						<div class="Creator-Img-Block">
							<img class="Creator-Img" src="/Icons/Like-Icon.png" />					
						</div>
						<div class="Creator-Name-Block">
							@Post.Creator.UserName
						</div>
					</div>
					<div class="Post-Contnet-Block">
						<p class="Post-Content">@Post.Content</p>
					</div>
						<div class="Post-Reaction-Block">
						<div class="Likes">
							<div class="Like-Icon">
							<button @onclick="() => AddLike(Post.Id)">
								<img class="Like-Icon-Img" src="/Icons/Like-Icon.png" />
								</button>
							</div>
							<div class="Likes-Numer">
								<p class="Likes-Number-Paragraph">@Post.NumberOfLikes</p>
							</div>
						</div>
						<div class="Comments-Stats">
							<div class="Comment-Icon">
								<img class="Comment-Icon-Img" src="/Icons/Comment-Icon.png"/>
							</div>
							<div class="Comments-Number">
								<p class="Comments-Number-Paragraph">@Post.NumberOfComments</p>
							</div>
						</div>
					</div>				
				</div>
			}
		}
	</div>
@code{
	private List<PostModel> Posts;
	private UserModel User;
	private string PostContent;
	protected override async Task OnInitializedAsync()
	{
		User = await _UserGetter.GetLoggedUser();
		await GetPosts();
	}
	private async Task AddLike(string PostId)
	{
		var Likes = await _LikeGetter.GetLikesByPostId(PostId);
		foreach(var Like in Likes)
		{
			if (Like.UserId == User.Id)
			{
				return;
			}
		}
		var Post = await _PostGetter.GetPostsById(PostId);
		Post.NumberOfLikes++;
		//mozna dac nieskonczonosc likow 


	}
	private async Task GetPosts()
	{
		Posts = await _PostGetter.GetPosts();
	}
	private async Task SavePost()
	{
		var Content = PostContent;
		var Post = new PostModel
			{
				Content = Content,
				CreatorId = User.Id
			};
		PostContent = "";
		await _PostService.AddPost(Post);
		await GetPosts();

	}

}