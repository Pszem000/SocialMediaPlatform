@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using SocialMediaPlatform.Models
@using SocialMediaPlatform.Services
@using SocialMediaPlatform.Services.Interfaces
@using System.Text
@inject IMessageGetter _MessageGetter;
@inject NavigationManager Navigation
@inject IPostsService _PostService;
@inject IPostGetter _PostGetter;
@inject IUserGetter _UserGetter;
@inject ILikeGetter _LikeGetter;
@inject ILikeService _LikeService;
@inject IJSRuntime JSRunTime;
@attribute [Authorize]
@implements IAsyncDisposable
<PageTitle>Home</PageTitle>
<link href="css/MainPageStyle.css" rel="stylesheet">
<div id="MainPage-OtherThings">
	<button class="Button-Redirect" @onclick="@(() =>  RedirectToPage("/Account"))">Account</button>
	<button class="Button-Redirect" @onclick="@(() =>  RedirectToPage("/Messenger"))">Messenger</button>
	<div id="LastetMessages">
		<h2>Lastet messages</h2>
		@if (UserList != null && UserList.Count != 0)
		{
			@foreach (var User in UserList)
			{
				<div class="UserList-User">
					<div class="UserList-PhotoContainer">
						@if (UnreadMessageCounts.ContainsKey(User.Id) && UnreadMessageCounts[User.Id] != 0)
						{
							<span class="UnreadMessagesNotification">@UnreadMessageCounts[User.Id]</span>
							<img class="UserList-PhotoWithNotification" src="@User.ProfileImageSrc" />
						}
						else
						{
							<img class="UserList-Photo" src="@User.ProfileImageSrc" />
						}

					</div>
					@if (User.UserName.Length > 20)
					{
						<button class="UserList-Button" @onclick="@(() =>  RedirectToPage($"chat/{User.Id}"))">@User.UserName.Substring(0, 20)...</button>
					}
					else
					{
						<button class="UserList-Button" @onclick="@(() =>  RedirectToPage($"chat/{User.Id}"))">@User.UserName</button>
					}

				</div>
			}
		}
	</div>
</div>
<div id="MainPage-Posts">
<div id="PostsBlock">
		<div id="AddPost">
			<h2>Add Post</h2>
			<br />
			<input type="text" id="Add-Post-Content" placeholder="Enter Content" @bind="PostContent" />
			<br />
			<button id="Add-Post-Button" @onclick="SavePost">Add</button>
		</div>
	@if (PostsList != null)
	{
		foreach (var Post in PostsDict)
		{
			<div class="Post" id="Post-@Post.Key.Id">
				<div class="CreatorContainer">
					<div class="Creator-Img-Block">
							<img class="Creator-Img" src="/ProfileImages/DefaultProfile.jpg">
					</div>
					<div class="Creator-Name-Block">
						@Post.Key.Creator.UserName
					</div>
				</div>
				<div class="Post-Contnet-Block">
					<p class="Post-Content">@Post.Key.Content</p>
				</div>
				<div class="Post-Reaction-Block">
					<div class="Likes">
						<div class="Like-Icon">
						<button class="Like-Button" @onclick="() => AddLike(Post.Key.Id)">
							<img class="Like-Icon-Img" id="LikeIcon-@Post.Key.Id" src="@Post.Value" />
						</button>						
						</div>
						<div class="Likes-Numer">
							<p class="Likes-Number-Paragraph">@Post.Key.NumberOfLikes</p>
						</div>
					</div>
					<div class="Comments-Stats">
						<button class="Comment-Icon" @onclick="() => AddCommentBlock(Post.Key.Id) " >
							<img class="Comment-Icon-Img" src="/Icons/Comment-Icon.png" />
						</button>
						<div class="Comments-Number">
							<p class="Comments-Number-Paragraph">@Post.Key.NumberOfComments</p>
						</div>
					</div>
				</div>
			</div>

		}
	}
</div>
</div>
@code {
	private List<PostModel> PostsList;
	private UserModel User;
	private string PostContent;
	private HubConnection? _HubConnection;
	private List<UserModel> UserList = new List<UserModel>();
	private Dictionary<string, int> UnreadMessageCounts = new Dictionary<string, int>();
	private Dictionary<PostModel, string> PostsDict = new Dictionary<PostModel, string>();

	protected override async Task OnInitializedAsync()
	{
		User = await _UserGetter.GetLoggedUser();		
		if(User == null)
		{
			RedirectToPage("/Account/Login");
		}
		else
		{
			UserList = await _UserGetter.GetUsers(User.Id);
			await GetPosts();
			foreach (var Post in PostsList)
			{
				if (Post.Likes.Where(x => x.UserId == User.Id).Count() != 0)
				{
					PostsDict[Post] = "/Icons/Like-Icon2.png";
				}
				else
				{
					PostsDict[Post] = "/Icons/Like-Icon1.png";
				}
			}

			_HubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri("/testhub"), options =>
			{
				options.Headers["UserId"] = User.Id;
			})
			.Build();

			await _HubConnection.StartAsync();

			await _HubConnection.InvokeAsync("JoinGroup", User.Id);

		}
		
	}

	public async ValueTask DisposeAsync()
	{
		if (_HubConnection != null)
		{
			await _HubConnection.DisposeAsync();
		}
	}
	private async Task AddLike(string PostId)
	{

		var Post = await _PostGetter.GetPostsById(PostId);
		var like = await _LikeGetter.GetCurrentLikeModel(PostId, User.Id);
		if (like == null)
		{
			await _LikeService.AddLikeModel(PostId, User.Id);
			ChangeSrc("LikeIcon-" + PostId, "/Icons/Like-Icon2.png");
		}
		else
		{
			await _LikeService.RemoveLikeModel(PostId, User.Id);
			ChangeSrc("LikeIcon-" + PostId, "/Icons/Like-Icon1.png");
		}
	}

	private async Task GetPosts()
	{
		PostsList = await _PostGetter.GetPosts();
	}

	private async Task SavePost()
	{
		var post = new PostModel
			{
				Content = PostContent,
				CreatorId = User.Id,
				Creator = User
			};
		PostContent = "";
		await _PostService.AddPost(post);
		await GetPosts();
	}
	private void ChangeSrc(string ElementId, string NewSrc)
	{
		JSRunTime.InvokeVoidAsync("ChangePhoto", ElementId, NewSrc);
	}
	private async Task AddCommentBlock(string PostId)
	{
		await JSRunTime.InvokeVoidAsync("AddCommentBlock", PostId);
		await AddComments(PostId);
	}
	private async Task AddComments(string PostId)
	{
		var Post = await _PostGetter.GetPostsById(PostId);
		foreach(var Comment in Post.Comments)
		{
			await JSRunTime.InvokeVoidAsync("AddComment", PostId, Comment.Creator.UserName, AddBreakLines(Comment.Content));
		}
	}
	private string AddBreakLines(string Message)
	{
		var MessageWithBreakLines = "";
		StringBuilder OutPutText = new StringBuilder();
		int Counter = 0;

		foreach (char c in Message)
		{
			if (Counter >= 100)
			{
				OutPutText.Append("</br>");
				Counter = 0;
			}
			OutPutText.Append(c);
			Counter++;
		}
		MessageWithBreakLines = OutPutText.ToString();
		return MessageWithBreakLines;
	}
	private void RedirectToPage(string Url)
	{
		Navigation.NavigateTo(Url, forceLoad: true);
	}
	private async Task<int> CountUnreadMessages(UserModel User)
	{
		var UnreadMessages = await _MessageGetter.GetMessages(User.Id, User.Id);
		UnreadMessages = UnreadMessages.Where(x => x.IsRead == false && x.CreatorId == User.Id).ToList();
		return UnreadMessages.Count;
	}
}
