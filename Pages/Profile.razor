@page "/Profile/{UserId}"
@using SocialMediaPlatform.Models
@using SocialMediaPlatform.Services.Interfaces
@attribute [Authorize]
@inject IUserGetter _UserGetter;
@inject IFollowGetter _FollowGetter;
@inject IFollowService _FollowService;
@inject IJSRuntime JSRuntime;
<link href="css/ProfileStyle.css" rel="stylesheet">
@if (User != null)
{
	<PageTitle>Profile @User.UserName</PageTitle>
	<div id="UserInfo">
		<div id="UsernameAndPhoto-Container">
			<img id="UserPhoto" src="@User.ProfileImageSrc" />
			<p id="Username">@User.UserName</p>
	
		</div>
		<div id="UserBio-Conatiner">
			<p id="UserBio">@User.Bio</p>
		</div>
		<div id="Followers-Container">
			<span id="Followers">Follower: @User.NumberOfFollowers</span>
			<span id="Following">Following: @User.NumberOfFollowing</span>
		</div>
		
		@if(CanFollow)
		{
			<div id="Buttons-Container">			
				<button id="Follow-Button" class="Follow" @onclick="@(() => ChangeFollow())">Follow</button>		
				<button id="DirectMessage-Button">Open Chat</button>
			</div>
		}
		
	</div>
	<div id="UserPosts">
		
	</div>
}

@code{
	[Parameter] public string UserId { get; set; }
	private UserModel LoggedUser;
	private UserModel User;
	private bool UserHaveFollow;
	private bool CanFollow = true;
	protected override async Task OnInitializedAsync()
	{
		LoggedUser = await _UserGetter.GetLoggedUser();
		User = await _UserGetter.GetUserById(UserId);
		if(UserId == LoggedUser.Id)
		{
			CanFollow = false;
		}
		if (CanFollow)
		{
			await CheckFollow();
			if (UserHaveFollow)
			{
				await JSRuntime.InvokeVoidAsync("ChangeFollowButton", "UnFollow");
			}
			else
			{
				await JSRuntime.InvokeVoidAsync("ChangeFollowButton", "Follow");
			}
		}
	}
	public async Task ChangeFollow()
	{
		await CheckFollow();
		if (UserHaveFollow)
		{
			await _FollowService.RemoveFollow(LoggedUser.Id, UserId);
			await JSRuntime.InvokeVoidAsync("ChangeFollowButton", "Follow");
		}
		else
		{
			await _FollowService.AddFollow(LoggedUser.Id, UserId);
			await JSRuntime.InvokeVoidAsync("ChangeFollowButton", "UnFollow");
		}

	}

	public async Task CheckFollow()
	{
		var Follow = await _FollowGetter.GetCurrentFollow(LoggedUser.Id, UserId);
		if (Follow == null)
		{
			UserHaveFollow = false;
		}
		else
		{
			UserHaveFollow = true;
		}
		StateHasChanged();
	}
}