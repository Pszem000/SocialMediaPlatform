@page "/Profile/{UserId}"
@using Microsoft.AspNetCore.SignalR.Client
@using SocialMediaPlatform.Models
@using SocialMediaPlatform.Services.Interfaces
@using System.Text
@attribute [Authorize]
@implements IAsyncDisposable
@inject IUserGetter _UserGetter;
@inject IFollowGetter _FollowGetter;
@inject IFollowService _FollowService;
@inject IJSRuntime JSRunTime;
@inject NavigationManager Navigation
@inject IPostGetter _PostGetter;
@inject ILikeService _LikeService;
@inject ILikeGetter _LikeGetter;
@inject IPostsService _PostService;
<link href="css/ProfileStyle.css" rel="stylesheet">
@if (User != null)
{
	<PageTitle>Profile @User.UserName</PageTitle>
	<div id="ButtonRedirect-Container">
		<button id="Buttton-Redirect" @onclick="@(() => RedirectToPage("/"))">Main Page</button>
	</div>
	<div id="UserInfo">
		<div id="UsernameAndPhoto-Container">
			<img id="UserPhoto" src="@User.ProfileImageSrc" />
			<p id="Username">@User.UserName</p>
	
		</div>
		<div id="UserBio-Conatiner">
			<div id="UserBioContent-Container">
			<p id="UserBio">@User.Bio</p>
			</div>
			@if(!CanFollow)
			{
				<div id="ChangeBioButtonIcon-Container">
				<img id="ChangeBioButtonIcon" src="/Icons/EditIcon.png" @onclick="@(() => GenerateBIOForm(User.Bio))" />
				</div>
			}
		</div>
		<div id="Followers-Container">
			<span id="Followers">Follower: @User.NumberOfFollowers</span>
			<span id="Following">Following: @User.NumberOfFollowing</span>
		</div>
		
		@if(CanFollow)
		{
			<div id="Buttons-Container">			
				<button id="Follow-Button" class="Follow" @onclick="@(() => ChangeFollow())">Follow</button>
				<button id="DirectMessage-Button" @onclick='() => RedirectToPage($"/Chat/{UserId}")'>Open Chat</button>
			</div>
		}
		
	</div>
	<div id="UserPosts">
		@if (PostsList != null)
		{
			foreach (var Post in PostsDict)
			{
				<div class="Post" id="Post-@Post.Key.Id">
					<div class="CreatorContainer">
						<div class="Creator-Img-Block">
							<img class="Creator-Img" src="@Post.Key.Creator.ProfileImageSrc">
						</div>
						<div class="Creator-Name-Block">
							<p @onclick='() => RedirectToPage($"/Profile/{Post.Key.CreatorId}")' class="Creator-Name">@Post.Key.Creator.UserName</p>
						</div>
						<div class="RemovePost-Container">
							<button class="Remove-Button" @onclick="() => RemovePost(Post.Key.Id)"><img src="/Icons/delete.png" class="Remove-Icon" /></button>
						</div>
					</div>
					<div class="Post-Contnet-Block">
						<p class="Post-Content">@Post.Key.Content</p>
					</div>
					<div class="Post-Reaction-Block">
						<div class="Likes">
							<div class="Like-Icon">
								<button class="Like-Button" @onclick="() => AddLike(Post.Key.Id)">
									<img class="Like-Icon-Img" id="LikeIcon-@Post.Key.Id" src="@Post.Value" />
								</button>
							</div>
							<div class="Likes-Numer">
								<p class="Likes-Number-Paragraph">@Post.Key.NumberOfLikes</p>
							</div>
						</div>
						<div class="Comments-Stats">
							<button class="Comment-Icon" @onclick="() => AddCommentBlock(Post.Key.Id)">
								<img class="Comment-Icon-Img" src="/Icons/Comment-Icon.png" />
							</button>
							<div class="Comments-Number">
								<p class="Comments-Number-Paragraph">@Post.Key.NumberOfComments</p>
							</div>
						</div>
					</div>
				</div>

			}
		}
	</div>
}

@code{
	[Parameter] public string UserId { get; set; }
	private UserModel LoggedUser;
	private UserModel User;
	private List<PostModel> PostsList;
	private Dictionary<PostModel, string> PostsDict = new Dictionary<PostModel, string>();
	private bool UserHaveFollow;
	private bool CanFollow = true;
	private HubConnection? _HubConnection;
	protected override async Task OnInitializedAsync()
	{
		LoggedUser = await _UserGetter.GetLoggedUser();
		User = await _UserGetter.GetUserById(UserId);
		if(UserId == LoggedUser.Id)
		{
			CanFollow = false;
		}
		if (CanFollow)
		{
			await CheckFollow();
			if (UserHaveFollow)
			{
				await JSRunTime.InvokeVoidAsync("ChangeFollowButton", "UnFollow");
			}
			else
			{
				await JSRunTime.InvokeVoidAsync("ChangeFollowButton", "Follow");
			}

			_HubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri("/AppHub"), options =>
			{
				options.Headers["UserId"] = User.Id;
			})
			.Build();

			await _HubConnection.StartAsync();

			await _HubConnection.InvokeAsync("JoinGroup", User.Id);
		}
		PostsList = await _PostGetter.GetPostsByCreatorId(UserId);
		if(PostsList != null)
		{
			foreach (var Post in PostsList)
			{
				if (Post.Likes.Where(x => x.UserId == User.Id).Count() != 0)
				{
					PostsDict[Post] = "/Icons/Like-Icon2.png";
				}
				else
				{
					PostsDict[Post] = "/Icons/Like-Icon1.png";
				}
			}
		}

	}
	public async ValueTask DisposeAsync()
	{
		if (_HubConnection != null)
		{
			await _HubConnection.DisposeAsync();
		}
	}
	public async Task ChangeFollow()
	{
		await CheckFollow();
		if (UserHaveFollow)
		{
			await _FollowService.RemoveFollow(LoggedUser.Id, UserId);
			await JSRunTime.InvokeVoidAsync("ChangeFollowButton", "Follow");
		}
		else
		{
			await _FollowService.AddFollow(LoggedUser.Id, UserId);
			await JSRunTime.InvokeVoidAsync("ChangeFollowButton", "UnFollow");
		}

	}
	private async Task AddLike(string PostId)
	{

		var Post = await _PostGetter.GetPostsById(PostId);
		var like = await _LikeGetter.GetCurrentLikeModel(PostId, User.Id);
		if (like == null)
		{
			await _LikeService.AddLikeModel(PostId, User.Id);
			ChangeSrc("LikeIcon-" + PostId, "/Icons/Like-Icon2.png");
		}
		else
		{
			await _LikeService.RemoveLikeModel(PostId, User.Id);
			ChangeSrc("LikeIcon-" + PostId, "/Icons/Like-Icon1.png");
		}
	}
	private void ChangeSrc(string ElementId, string NewSrc)
	{
		JSRunTime.InvokeVoidAsync("ChangePhoto", ElementId, NewSrc);
	}
	public async Task CheckFollow()
	{
		var Follow = await _FollowGetter.GetCurrentFollow(LoggedUser.Id, UserId);
		if (Follow == null)
		{
			UserHaveFollow = false;
		}
		else
		{
			UserHaveFollow = true;
		}
		StateHasChanged();
	}
	private async Task AddCommentBlock(string PostId)
	{
		await JSRunTime.InvokeVoidAsync("AddCommentBlock", PostId);
		await AddComments(PostId);
	}
	private async Task AddComments(string PostId)
	{
		var Post = await _PostGetter.GetPostsById(PostId);
		foreach (var Comment in Post.Comments)
		{
			await JSRunTime.InvokeVoidAsync("AddComment", PostId, Comment.Creator.UserName, AddBreakLines(Comment.Content));
		}
	}
	private async Task RemovePost(string PostId)
	{
		await _PostService.RemovePost(PostId);
		await JSRunTime.InvokeVoidAsync("RemovePost", PostId);
	}
	private string AddBreakLines(string Message)
	{
		var MessageWithBreakLines = "";
		StringBuilder OutPutText = new StringBuilder();
		int Counter = 0;

		foreach (char c in Message)
		{
			if (Counter >= 100)
			{
				OutPutText.Append("</br>");
				Counter = 0;
			}
			OutPutText.Append(c);
			Counter++;
		}
		MessageWithBreakLines = OutPutText.ToString();
		return MessageWithBreakLines;
	}
	private void RedirectToPage(string Url)
	{
		Navigation.NavigateTo(Url, forceLoad: true);
	}
	private async Task GenerateBIOForm(string UserBio)
	{
		await JSRunTime.InvokeVoidAsync("GenerateBIOForm", User.Bio,User.Id);
	}
}